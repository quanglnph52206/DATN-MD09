const express = require("express");
const router = express.Router();
const { Product, ProductVariant } = require("../model/Shoes");
const upload = require("../config/upload"); // multer

// üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m (hi·ªÉn th·ªã ra Dashboard ho·∫∑c ng∆∞·ªùi d√πng)
// ==========================
router.get("/", async (req, res) => {
    try {
        const products = await Product.find().lean();

        // G·∫Øn th√™m bi·∫øn th·ªÉ (n·∫øu c·∫ßn)
        const result = await Promise.all(
            products.map(async (p) => {
                const variants = await ProductVariant.find({ productId: p._id });
                return { ...p, variants };
            })
        );

        res.status(200).json(result);
    } catch (err) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m:", err);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m!" });
    }
});

// ==========================
// üü¢ Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m (ngo√†i)
// ==========================


// ==========================
// üü¢ Hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m (b√™n trong)
// ==========================
router.get("/:id", async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

        const variants = await ProductVariant.find({ productId: product._id });

        res.status(200).json({
            _id: product._id,
            name: product.name,
            brand: product.brand,
            description: product.description,
            category: product.categoryId || null,
            isActive: product.isActive,
            variants
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "L·∫•y chi ti·∫øt s·∫£n ph·∫©m th·∫•t b·∫°i" });
    }
});

// ==========================
// üü¢ Th√™m s·∫£n ph·∫©m + bi·∫øn th·ªÉ (ch·ªâ 1 ho·∫∑c nhi·ªÅu ·∫£nh)
// ==========================
router.post("/", upload.any(), async (req, res) => {
    try {
        console.log("üß© BODY:", req.body);
        console.log("üñºÔ∏è FILES:", req.files);

        const { name, description, brand, categoryId, isActive } = req.body;

        // ‚úÖ Parse variants t·ª´ JSON string
        let variants = [];
        if (req.body.variants) {
            try {
                variants = typeof req.body.variants === "string"
                    ? JSON.parse(req.body.variants)
                    : req.body.variants;
            } catch (e) {
                return res.status(400).json({ message: "D·ªØ li·ªáu variants kh√¥ng h·ª£p l·ªá!" });
            }
        }

        // ‚úÖ Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
        if (!name || !categoryId || !variants.length) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!" });
        }

        // ‚úÖ T·∫°o s·∫£n ph·∫©m ch√≠nh
        const newProduct = new Product({
            name,
            description,
            brand,
            categoryId,
            isActive: isActive !== undefined ? isActive : true,
        });
        await newProduct.save();

        // ‚úÖ Duy·ªát v√† t·∫°o bi·∫øn th·ªÉ
        const savedVariants = [];

        for (let i = 0; i < variants.length; i++) {
            const v = variants[i];

            // Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc c·ªßa bi·∫øn th·ªÉ
            if (!v.color || !v.size || !v.originalPrice || !v.currentPrice) {
                return res.status(400).json({ message: `Bi·∫øn th·ªÉ th·ª© ${i + 1} thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!` });
            }

            // T√¨m file t∆∞∆°ng ·ª©ng theo m√†u ho·∫∑c index
            let file = req.files[i];
            const newVariant = new ProductVariant({
                productId: newProduct._id,
                color: v.color,
                size: v.size,
                originalPrice: v.originalPrice,
                currentPrice: v.currentPrice,
                stock: v.stock !== undefined ? v.stock : 0,
                status: v.status || "C√≤n h√†ng",
                image: file ? `/images/${file.filename}` : "",
            });

            await newVariant.save();
            savedVariants.push(newVariant);
        }

        return res.status(201).json({
            message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!",
            product: newProduct,
            variants: savedVariants,
        });
    } catch (error) {
        console.error("‚ùå L·ªói th√™m s·∫£n ph·∫©m:", error);
        return res.status(500).json({ message: "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m!" });
    }
});

//S·ª≠a s·∫£n ph·∫©m

router.put("/:id", upload.any(), async (req, res) => {
    try {
        const { id } = req.params;
        console.log("üß© BODY:", req.body);
        console.log("üñºÔ∏è FILES:", req.files);

        const { name, description, brand, categoryId, isActive, variants } = req.body;

        // ‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m ch√≠nh
        const updateProductData = { updatedAt: new Date() };
        if (name) updateProductData.name = name;
        if (description) updateProductData.description = description;
        if (brand) updateProductData.brand = brand;
        if (categoryId) updateProductData.categoryId = categoryId;
        if (isActive !== undefined) updateProductData.isActive = isActive;

        const updatedProduct = await Product.findByIdAndUpdate(id, updateProductData, { new: true });
        if (!updatedProduct) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });

        // ‚úÖ C·∫≠p nh·∫≠t bi·∫øn th·ªÉ (n·∫øu c√≥ g·ª≠i)
        let savedVariants = [];
        if (variants) {
            let variantsData;
            try {
                variantsData = typeof variants === "string" ? JSON.parse(variants) : variants;
            } catch (e) {
                return res.status(400).json({ message: "D·ªØ li·ªáu variants kh√¥ng h·ª£p l·ªá!" });
            }

            for (let i = 0; i < variantsData.length; i++) {
                const v = variantsData[i];

                // Bi·∫øn th·ªÉ ph·∫£i c√≥ ID ƒë·ªÉ bi·∫øt update
                if (!v._id) continue;

                const updateVariantData = {};
                if (v.color) updateVariantData.color = v.color;
                if (v.size) updateVariantData.size = v.size;
                if (v.currentPrice !== undefined) updateVariantData.currentPrice = v.currentPrice;
                if (v.stock !== undefined) updateVariantData.stock = v.stock;
                if (v.status) updateVariantData.status = v.status;

                // N·∫øu c√≥ file ·∫£nh g·ª≠i k√®m, l·∫•y file t∆∞∆°ng ·ª©ng
                let file = req.files.find(f => f.fieldname === `image-${i}`);
                if (file) updateVariantData.image = `/images/${file.filename}`;

                const updatedVariant = await ProductVariant.findByIdAndUpdate(v._id, updateVariantData, { new: true });
                if (updatedVariant) savedVariants.push(updatedVariant);
            }
        }

        return res.status(200).json({
            message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!",
            product: updatedProduct,
            variants: savedVariants
        });

    } catch (error) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
        return res.status(500).json({ message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m!" });
    }
});
// ==========================
// üî¥ X√≥a s·∫£n ph·∫©m + bi·∫øn th·ªÉ
// ==========================
router.delete("/:id", async (req, res) => {
    try {
        const { id } = req.params;

        const deletedProduct = await Product.findByIdAndDelete(id);
        if (!deletedProduct) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });

        await ProductVariant.deleteMany({ productId: id });

        res.status(200).json({ message: "X√≥a s·∫£n ph·∫©m v√† bi·∫øn th·ªÉ th√†nh c√¥ng!" });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i" });
    }
});

module.exports = router;
