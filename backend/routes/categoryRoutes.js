const express = require("express");
const router = express.Router();
const Category = require("../model/Category"); // ‚ö†Ô∏è ƒë·ªïi ƒë√∫ng ƒë∆∞·ªùng d·∫´n n·∫øu b·∫°n ƒë·ªÉ trong /models/

// üü¢ L·∫•y t·∫•t c·∫£ danh m·ª•c
router.get("/", async (req, res) => {
    try {
        const categories = await Category.find().sort({ createdAt: -1 });
        res.status(200).json(categories);
    } catch (error) {
        console.error("‚ùå L·ªói l·∫•y danh m·ª•c:", error.message);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y danh m·ª•c!" });
    }
});

// üü¢ Th√™m danh m·ª•c
router.post("/", async (req, res) => {
    try {
        const { name, description } = req.body;

        if (!name) {
            return res.status(400).json({ message: "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
        }

        const existing = await Category.findOne({ name });
        if (existing) {
            return res.status(400).json({ message: "Danh m·ª•c ƒë√£ t·ªìn t·∫°i!" });
        }

        const newCategory = new Category({ name, description });
        await newCategory.save();

        res.status(201).json({ message: "Th√™m danh m·ª•c th√†nh c√¥ng!", category: newCategory });
    } catch (error) {
        console.error("‚ùå L·ªói th√™m danh m·ª•c:", error.message);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ th√™m danh m·ª•c!" });
    }
});

// üü° S·ª≠a danh m·ª•c
router.put("/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description } = req.body;

        const updated = await Category.findByIdAndUpdate(
            id,
            { name, description },
            { new: true }
        );

        if (!updated) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c!" });

        res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", category: updated });
    } catch (error) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t danh m·ª•c:", error.message);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c!" });
    }
});

// üî¥ X√≥a danh m·ª•c
router.delete("/:id", async (req, res) => {
    try {
        const { id } = req.params;

        const deleted = await Category.findByIdAndDelete(id);
        if (!deleted) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c!" });

        res.status(200).json({ message: "X√≥a danh m·ª•c th√†nh c√¥ng!" });
    } catch (error) {
        console.error("‚ùå L·ªói x√≥a danh m·ª•c:", error.message);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ x√≥a danh m·ª•c!" });
    }
});

module.exports = router;
